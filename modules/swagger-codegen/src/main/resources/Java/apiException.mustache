{{>licenseInfo}}

package {{invokerPackage}};

import java.util.Map;
import java.util.List;

import lombok.Getter;

{{>generatedAnnotation}}
public class ApiException extends{{#useRuntimeException}} RuntimeException {{/useRuntimeException}}{{^useRuntimeException}} Exception {{/useRuntimeException}}{
    /**
     * The HTTP Status Code
     */
    @Getter
    private int code = 0;

    @Getter
    private Map<String, List<String>> responseHeaders = null;

    @Getter
    private String responseBody = null;

    public static ApiException missingParam(String paramName, String operationId) {
        final String msg = String.format("Missing the required parameter '%s' when calling %s", paramName, operationId);
        return new ApiException(msg);
    }

    public static ApiException missingParam(int code, String paramName, String operationId) {
        final String msg = String.format("Missing the required parameter '%s' when calling %s", paramName, operationId);
        return new ApiException(code, msg);
    }

    public ApiException() {}

    public ApiException(Throwable throwable) {
        super(throwable);
    }

    public ApiException(String message) {
        super(message);
    }

    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders, String responseBody) {
        super(message, throwable);
        this.code = code;
        this.responseHeaders = responseHeaders;
        this.responseBody = responseBody;
    }

    public ApiException(String message, int code, Map<String, List<String>> responseHeaders, String responseBody) {
        this(message, (Throwable) null, code, responseHeaders, responseBody);
    }

    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders) {
        this(message, throwable, code, responseHeaders, null);
    }

    public ApiException(int code, Map<String, List<String>> responseHeaders, String responseBody) {
        this((String) null, (Throwable) null, code, responseHeaders, responseBody);
    }

    public ApiException(int code, String message) {
        super(message);
        this.code = code;
    }

    public ApiException(int code, String message, Map<String, List<String>> responseHeaders, String responseBody) {
        this(code, message);
        this.responseHeaders = responseHeaders;
        this.responseBody = responseBody;
    }
}
